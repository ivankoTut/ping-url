package command

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/ivankoTut/ping-url/internal/model"
	"strings"
)

type (
	// UserUrlList —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	UserUrlList interface {
		UrlListByUser(userId int64) (model.PingList, error)
	}

	// ListUrl —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
	ListUrl struct {
		urlRepo UserUrlList
	}
)

func NewListUrlCommand(urlRepo UserUrlList) *ListUrl {
	return &ListUrl{
		urlRepo: urlRepo,
	}
}

func (l *ListUrl) CommandName() string {
	return listUrlCommand
}

func (l *ListUrl) HelpText() string {
	return "help text"
}

func (l *ListUrl) IsSupport(ctx context.Context, message *tgbotapi.Message) (bool, error) {

	if message.IsCommand() != true {
		return false, nil
	}

	return message.Command() == l.CommandName(), nil
}

func (l *ListUrl) Run(ctx context.Context, message *tgbotapi.Message) (tgbotapi.MessageConfig, error) {
	userId := message.Chat.ID
	msg := tgbotapi.NewMessage(userId, "")

	list, err := l.urlRepo.UrlListByUser(userId)

	if err != nil {
		msg.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
		return msg, err
	}

	str := strings.Builder{}
	for _, url := range list {
		str.WriteString(fmt.Sprintf("üåê <code>%s</code> \n‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - <code>%s</code> \nüï§ –í—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ - <code>%s</code>\n\n", url.Url, url.ConnectionTime, url.PingTime))
	}
	msg.ParseMode = tgbotapi.ModeHTML
	msg.Text = str.String()

	return msg, nil
}

func (l *ListUrl) ClearData(ctx context.Context, message *tgbotapi.Message) error {

	return nil
}
