package command

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/ivankoTut/ping-url/internal/model"
	"github.com/redis/go-redis/v9"
	"strings"
)

const stateStatisticUrlNone = -1

const (
	stateStatisticUrlBegin  = iota //–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
	stateStatisticUrlSetUrl        //—Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
)

type (
	// UrlStatistic —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è–¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ
	UrlStatistic interface {
		StatisticByUrl(userId int64, url string) (model.Statistic, error)
	}

	// UrlRepositoryExist —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	UrlRepositoryExist interface {
		UrlExist(userId int64, url string) (bool, error)
	}

	// StatisticUrl —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
	StatisticUrl struct {
		statisticRepo UrlStatistic
		dialog        DialogChain
		urlRepo       UrlRepositoryExist
		questions     []string
	}
)

func NewStatisticUrlCommand(statisticRepo UrlStatistic, dialog DialogChain, urlRepo UrlRepositoryExist) *StatisticUrl {
	return &StatisticUrl{
		statisticRepo: statisticRepo,
		dialog:        dialog,
		urlRepo:       urlRepo,
		questions: []string{
			"–£–∫–∞–∂–∏—Ç–µ url –∞–¥—Ä–µ—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
		},
	}
}

func (s *StatisticUrl) CommandName() string {
	return StatisticUrlCommand
}

func (s *StatisticUrl) HelpText() string {
	return "help text"
}

func (s *StatisticUrl) IsSupport(ctx context.Context, message *tgbotapi.Message) (bool, error) {

	if message.IsCommand() == true {
		return message.Command() == s.CommandName(), nil
	}

	key := s.key(message)

	is, err := s.dialog.DialogExist(ctx, key)
	if err != nil {
		return false, err
	}

	return is, nil
}

func (s *StatisticUrl) key(message *tgbotapi.Message) string {
	return fmt.Sprintf("%d_%s", message.Chat.ID, s.CommandName())
}

func (s *StatisticUrl) keyAnswer(message *tgbotapi.Message) string {
	return fmt.Sprintf("%d_%s_answer", message.Chat.ID, s.CommandName())
}

func (s *StatisticUrl) Run(ctx context.Context, message *tgbotapi.Message) (tgbotapi.MessageConfig, error) {
	ctx, span := tracer.Start(ctx, fmt.Sprintf("Run command: %s", s.CommandName()))
	defer span.End()
	key := s.key(message)
	msg := tgbotapi.NewMessage(message.Chat.ID, "")

	state, err := s.dialog.CurrentState(ctx, key)
	if err != nil && err != redis.Nil {
		msg.Text = "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å"
		span.RecordError(err)
		return msg, err
	}

	if err == redis.Nil {
		err = nil
		state = stateRemoveUrlNone
	}

	var nextState int
	switch state {
	case stateStatisticUrlNone:
		nextState = stateStatisticUrlBegin
		msg.Text = s.questions[nextState]
	case stateStatisticUrlBegin:
		nextState = stateStatisticUrlSetUrl

		is, errExist := s.urlRepo.UrlExist(message.Chat.ID, message.Text)
		if errExist != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
			span.RecordError(err)
			return msg, errExist
		}

		if !is {
			msg.Text = "–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
			return msg, nil
		}

		stats, err := s.statisticRepo.StatisticByUrl(message.Chat.ID, message.Text)
		if err != nil {
			msg.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

			span.RecordError(err)

			return msg, err
		}

		if err := s.ClearData(ctx, message); err != nil {
			msg.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"

			span.RecordError(err)

			return msg, err
		}

		str := strings.Builder{}
		str.WriteString(fmt.Sprintf("üåê <code>%s</code> \n"+
			"üîÑ –ö–æ–ª–∏-–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - <code>%d</code> \n"+
			"üëå –ö–æ–ª–∏-–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - <code>%d</code> \n"+
			"‚õîÔ∏è –ö–æ–ª–∏-–≤–æ –ø—Ä–µ—Ä–≤–∞–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - <code>%d</code> \n"+
			"‚è≥ –ú–∞–∫—Å-–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - <code>%.4f</code> \n"+
			"‚è≥ –ú–∏–Ω-–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - <code>%.4f</code> \n"+
			"üï§ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - <code>%.4f</code>\n\n",
			stats.Url, stats.CountPing, stats.CorrectCount, stats.CancelCount, stats.MaxConnectionTime, stats.MinConnectionTime, stats.AvgConnectionTime,
		))

		if len(stats.Errors) > 0 {
			str.WriteString("–°–ø—Å–∏–æ–∫ –æ—à–∏–±–æ–∫\n\n")
			for _, errText := range stats.Errors {
				str.WriteString(fmt.Sprintf("–ö–æ–ª-–≤–æ: %d\n<code>%s</code> \n\n", errText.Count, errText.Text))
			}
		}

		msg.ParseMode = tgbotapi.ModeHTML
		msg.Text = str.String()

		return msg, err
	default:
		nextState = stateRemoveUrlNone
		msg.Text = s.questions[0]
	}

	_, errSave := s.dialog.SaveState(ctx, key, nextState)
	if errSave != nil {
		msg.Text = "–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"

		span.RecordError(errSave)

		return msg, errSave
	}

	return msg, err
}

func (s *StatisticUrl) ClearData(ctx context.Context, message *tgbotapi.Message) error {
	ctx, span := tracer.Start(ctx, fmt.Sprintf("clear data for %s", s.CommandName()))
	defer span.End()

	if err := s.dialog.DeleteDialog(ctx, s.key(message)); err != nil {
		span.RecordError(err)
		return err
	}

	return s.dialog.DeleteDialog(ctx, s.keyAnswer(message))
}

func (s *StatisticUrl) IsComplete(ctx context.Context, message *tgbotapi.Message) (bool, error) {
	key := s.key(message)

	is, err := s.dialog.DialogExist(ctx, key)
	if err != nil {
		return false, err
	}

	return is == false, nil
}
